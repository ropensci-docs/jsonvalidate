[{"path":"https://docs.ropensci.org/jsonvalidate/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/articles/jsonvalidate.html","id":"combining-schemas","dir":"Articles","previous_headings":"","what":"Combining schemas","title":"Introduction to jsonvalidate","text":"can combine schemas ajv engine. can reference definitions within one schema can reference schema files can combine schemas subdirectories. Note $ref path needs relative schema path. use absolute paths $ref jsonvalidate throw error try .","code":"schema <- '{   \"$schema\": \"http://json-schema.org/draft-04/schema#\",   \"definitions\": {     \"city\": { \"type\": \"string\" }   },   \"type\": \"object\",   \"properties\": {     \"city\": { \"$ref\": \"#/definitions/city\" }   } }' json <- '{     \"city\": \"Firenze\" }' jsonvalidate::json_validate(json, schema, engine = \"ajv\") ## [1] TRUE city_schema <- '{   \"$schema\": \"http://json-schema.org/draft-07/schema\",   \"type\": \"string\",   \"enum\": [\"Firenze\"] }' address_schema <- '{   \"$schema\": \"http://json-schema.org/draft-07/schema\",   \"type\":\"object\",   \"properties\": {     \"city\": { \"$ref\": \"city.json\" }   } }'  path <- tempfile() dir.create(path) address_path <- file.path(path, \"address.json\") city_path <- file.path(path, \"city.json\") writeLines(address_schema, address_path) writeLines(city_schema, city_path) jsonvalidate::json_validate(json, address_path, engine = \"ajv\") ## [1] TRUE user_schema = '{   \"$schema\": \"http://json-schema.org/draft-07/schema\",   \"type\": \"object\",   \"required\": [\"address\"],   \"properties\": {     \"address\": {       \"$ref\": \"sub/address.json\"     }   } }'  json <- '{   \"address\": {     \"city\": \"Firenze\"   } }'  path <- tempfile() subdir <- file.path(path, \"sub\") dir.create(subdir, showWarnings = FALSE, recursive = TRUE) city_path <- file.path(subdir, \"city.json\") address_path <- file.path(subdir, \"address.json\") user_path <- file.path(path, \"schema.json\") writeLines(city_schema, city_path) writeLines(address_schema, address_path) writeLines(user_schema, user_path) jsonvalidate::json_validate(json, user_path, engine = \"ajv\") ## [1] TRUE"},{"path":"https://docs.ropensci.org/jsonvalidate/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rich FitzJohn. Author, maintainer. Rob Ashton. Author. Alex Hill. Contributor. Alicia Schep. Contributor. Ian Lyttle. Contributor. Kara Woo. Contributor. Mathias Buus. Author, copyright holder.            Author bundled imjv library Evgeny Poberezkin. Author, copyright holder.            Author bundled Ajv library","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"FitzJohn R, Ashton R, Buus M, Poberezkin E (2024). jsonvalidate: Validate 'JSON' Schema. R package version 1.4.2,  https://github.com/ropensci/jsonvalidate, https://docs.ropensci.org/jsonvalidate/.","code":"@Manual{,   title = {jsonvalidate: Validate 'JSON' Schema},   author = {Rich FitzJohn and Rob Ashton and Mathias Buus and Evgeny Poberezkin},   year = {2024},   note = {R package version 1.4.2,  https://github.com/ropensci/jsonvalidate},   url = {https://docs.ropensci.org/jsonvalidate/}, }"},{"path":"https://docs.ropensci.org/jsonvalidate/index.html","id":"jsonvalidate","dir":"","previous_headings":"","what":"Validate JSON Schema","title":"Validate JSON Schema","text":"Validate JSON schema using --json-valid ajv. package thin wrapper around node libraries, using V8 package.","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Validate JSON Schema","text":"Directly validate json schema create validator multiple uses See package vignette complete examples.","code":"jsonvalidate::json_validate(json, schema) validate <- jsonvalidate::json_validator(schema) validate(json) validate(json2) # etc"},{"path":"https://docs.ropensci.org/jsonvalidate/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Validate JSON Schema","text":"Install CRAN Alternatively, current development version can installed GitHub ","code":"install.packages(\"jsonvalidate\") devtools::install_github(\"ropensci/jsonvalidate\")"},{"path":"https://docs.ropensci.org/jsonvalidate/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Validate JSON Schema","text":"MIT + file LICENSE © Rich FitzJohn. Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Interact with JSON schemas — json_schema","title":"Interact with JSON schemas — json_schema","text":"Interact JSON schemas, using validate json strings serialise objects JSON safely. interface supercedes json_schema changes default arguments.  old interface going away time soon, users encouraged switch interface, develop future.","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_schema.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Interact with JSON schemas — json_schema","text":"schema parsed schema, rebound engine name schema validation engine","code":""},{"path":[]},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_schema.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Interact with JSON schemas — json_schema","text":"json_schema$new() json_schema$validate() json_schema$serialise()","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_schema.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Interact with JSON schemas — json_schema","text":"Create new json_schema object.","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_schema.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interact with JSON schemas — json_schema","text":"","code":"json_schema$new(schema, engine = \"ajv\", reference = NULL, strict = FALSE)"},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interact with JSON schemas — json_schema","text":"schema Contents json schema, filename containing schema. engine Specify validation engine use.  Options \"ajv\" (default; \"Another JSON Schema Validator\") \"imjv\" (\"--json-valid\", default everywhere versions prior 1.4.0, default json_validator. Use ajv strongly recommended new code. reference Reference within schema use validating sub-schema instead full schema passed . example schema 'definitions' list including definition 'Hello' object, one pass \"#/definitions/Hello\" validator check json valid \"Hello\" object. available engine = \"ajv\". strict Set whether schema parsed strictly . strict mode schemas error \"prevent unexpected behaviours silently ignored mistakes user schema\". example error encounters unknown formats unknown keywords. See https://ajv.js.org/strict-mode.html details. available engine = \"ajv\" silently ignored \"imjv\". Validate json string schema.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_schema.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Interact with JSON schemas — json_schema","text":"","code":"json_schema$validate(   json,   verbose = FALSE,   greedy = FALSE,   error = FALSE,   query = NULL )"},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_schema.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interact with JSON schemas — json_schema","text":"json Contents json object, filename containing one. verbose verbose?  TRUE, attribute \"errors\" list validation failures data.frame greedy Continue first error? error Throw error parse failure?  TRUE, function returns NULL success (.e., call side-effect error failure, like stopifnot). query string indicating component data validate schema .  Eventually may support full jsonpath syntax, now must name element within json.  See examples details. Serialise R object JSON unboxing guided schema. See json_serialise details problem algorithm.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_schema.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Interact with JSON schemas — json_schema","text":"","code":"json_schema$serialise(object)"},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_schema.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interact with JSON schemas — json_schema","text":"object R object serialise","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interact with JSON schemas — json_schema","text":"","code":"# This is the schema from ?json_validator schema <- '{     \"$schema\": \"http://json-schema.org/draft-04/schema#\",     \"title\": \"Product\",     \"description\": \"A product from Acme\\'s catalog\",     \"type\": \"object\",     \"properties\": {         \"id\": {             \"description\": \"The unique identifier for a product\",             \"type\": \"integer\"         },         \"name\": {             \"description\": \"Name of the product\",             \"type\": \"string\"         },         \"price\": {             \"type\": \"number\",             \"minimum\": 0,             \"exclusiveMinimum\": true         },         \"tags\": {             \"type\": \"array\",             \"items\": {                 \"type\": \"string\"             },             \"minItems\": 1,             \"uniqueItems\": true         }     },     \"required\": [\"id\", \"name\", \"price\"] }'  # We're going to use a validator object below v <- jsonvalidate::json_validator(schema, \"ajv\")  # And this is some data that we might generate in R that we want to # serialise using that schema x <- list(id = 1, name = \"apple\", price = 0.50, tags = \"fruit\")  # If we serialise to json, then 'id', 'name' and \"price' end up a # length 1-arrays jsonlite::toJSON(x) #> {\"id\":[1],\"name\":[\"apple\"],\"price\":[0.5],\"tags\":[\"fruit\"]}   # ...and that fails validation v(jsonlite::toJSON(x)) #> [1] FALSE  # If we auto-unbox then 'fruit' ends up as a string and not an array, # also failing validation: jsonlite::toJSON(x, auto_unbox = TRUE) #> {\"id\":1,\"name\":\"apple\",\"price\":0.5,\"tags\":\"fruit\"}  v(jsonlite::toJSON(x, auto_unbox = TRUE)) #> [1] FALSE  # Using json_serialise we can guide the serialisation process using # the schema: jsonvalidate::json_serialise(x, schema) #> {\"id\":1,\"name\":\"apple\",\"price\":0.5,\"tags\":[\"fruit\"]}   # ...and this way we do pass validation: v(jsonvalidate::json_serialise(x, schema)) #> [1] TRUE  # It is typically much more efficient to construct a json_schema # object first and do both operations with it: obj <- jsonvalidate::json_schema$new(schema) json <- obj$serialise(x) obj$validate(json) #> [1] TRUE"},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_serialise.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe JSON serialisation — json_serialise","title":"Safe JSON serialisation — json_serialise","text":"Safe serialisation json unboxing guided schema.","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_serialise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe JSON serialisation — json_serialise","text":"","code":"json_serialise(   object,   schema,   engine = \"ajv\",   reference = NULL,   strict = FALSE )"},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_serialise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safe JSON serialisation — json_serialise","text":"object object serialised schema schema (string path string, suitable passed json_validator validator object . engine engine use. ajv supported, trying use imjv throw error. reference Reference within schema use validating sub-schema instead full schema passed . example schema 'definitions' list including definition 'Hello' object, one pass \"#/definitions/Hello\" validator check json valid \"Hello\" object. available engine = \"ajv\". strict Set whether schema parsed strictly . strict mode schemas error \"prevent unexpected behaviours silently ignored mistakes user schema\". example error encounters unknown formats unknown keywords. See https://ajv.js.org/strict-mode.html details. available engine = \"ajv\".","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_serialise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safe JSON serialisation — json_serialise","text":"string, representing object JSON format. jsonlite::toJSON set class attribute json mark serialised json.","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_serialise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Safe JSON serialisation — json_serialise","text":"using jsonlite::toJSON forced deal differences R's types available JSON. particular: R scalar types clear 1 serialised number vector length 1; jsonlite provides support \"automatically unboxing\" values (assuming length-1 vectors scalars) never unboxing unless asked using jsonlite::unbox JSON date/time values many possible string representations. JSON data.frame matrix type several ways representing JSON, equally valid (e.g., row-wise, column-wise array objects). handling NULL missing values (NA, NaN) different need chose number digits write numbers , balancing precision storage. issues somewhat lessened schema know target type looks like.  function attempts use schema guide serialsation json safely.  Currently supports detecting appropriate treatment length-1 vectors, expand functionality time. user, function provides argument-free replacement jsonlite::toJSON, accepting R object returning string JSON representation object. Internally algorithm : serialise object jsonlite::toJSON, auto_unbox = FALSE length-1 vectors serialised length-1 arrays. operating entirely within JavaScript, deserialise object JSON.parse, traverse object schema simultaneously looking length-1 arrays schema says scalar value unboxing , re-serialise JSON.stringify several limitations current approach, unboxable values found - moment know schemas contained within oneOf block (similar) recursed .","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_serialise.html","id":"","dir":"Reference","previous_headings":"","what":"Safe JSON serialisation — json_serialise","title":"Safe JSON serialisation — json_serialise","text":"Warning: Direct use function slow!  going serialise one two objects single schema, use serialise method json_schema object create pass around.","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_serialise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safe JSON serialisation — json_serialise","text":"","code":"# This is the schema from ?json_validator schema <- '{     \"$schema\": \"http://json-schema.org/draft-04/schema#\",     \"title\": \"Product\",     \"description\": \"A product from Acme\\'s catalog\",     \"type\": \"object\",     \"properties\": {         \"id\": {             \"description\": \"The unique identifier for a product\",             \"type\": \"integer\"         },         \"name\": {             \"description\": \"Name of the product\",             \"type\": \"string\"         },         \"price\": {             \"type\": \"number\",             \"minimum\": 0,             \"exclusiveMinimum\": true         },         \"tags\": {             \"type\": \"array\",             \"items\": {                 \"type\": \"string\"             },             \"minItems\": 1,             \"uniqueItems\": true         }     },     \"required\": [\"id\", \"name\", \"price\"] }'  # We're going to use a validator object below v <- jsonvalidate::json_validator(schema, \"ajv\")  # And this is some data that we might generate in R that we want to # serialise using that schema x <- list(id = 1, name = \"apple\", price = 0.50, tags = \"fruit\")  # If we serialise to json, then 'id', 'name' and \"price' end up a # length 1-arrays jsonlite::toJSON(x) #> {\"id\":[1],\"name\":[\"apple\"],\"price\":[0.5],\"tags\":[\"fruit\"]}   # ...and that fails validation v(jsonlite::toJSON(x)) #> [1] FALSE  # If we auto-unbox then 'fruit' ends up as a string and not an array, # also failing validation: jsonlite::toJSON(x, auto_unbox = TRUE) #> {\"id\":1,\"name\":\"apple\",\"price\":0.5,\"tags\":\"fruit\"}  v(jsonlite::toJSON(x, auto_unbox = TRUE)) #> [1] FALSE  # Using json_serialise we can guide the serialisation process using # the schema: jsonvalidate::json_serialise(x, schema) #> {\"id\":1,\"name\":\"apple\",\"price\":0.5,\"tags\":[\"fruit\"]}   # ...and this way we do pass validation: v(jsonvalidate::json_serialise(x, schema)) #> [1] TRUE  # It is typically much more efficient to construct a json_schema # object first and do both operations with it: obj <- jsonvalidate::json_schema$new(schema) json <- obj$serialise(x) obj$validate(json) #> [1] TRUE"},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a json file — json_validate","title":"Validate a json file — json_validate","text":"Validate single json schema.  convenience wrapper around json_validator(schema)(json) json_schema$new(schema, engine = \"ajv\")$validate(json).  See json_validator() details.","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a json file — json_validate","text":"","code":"json_validate(   json,   schema,   verbose = FALSE,   greedy = FALSE,   error = FALSE,   engine = \"imjv\",   reference = NULL,   query = NULL,   strict = FALSE )"},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a json file — json_validate","text":"json Contents json object, filename containing one. schema Contents json schema, filename containing schema. verbose verbose?  TRUE, attribute \"errors\" list validation failures data.frame greedy Continue first error? error Throw error parse failure?  TRUE, function returns NULL success (.e., call side-effect error failure, like stopifnot). engine Specify validation engine use.  Options \"imjv\" (default; uses \"--json-valid\") \"ajv\" (Another JSON Schema Validator).  latter supports recent json schema features. reference Reference within schema use validating sub-schema instead full schema passed . example schema 'definitions' list including definition 'Hello' object, one pass \"#/definitions/Hello\" validator check json valid \"Hello\" object. available engine = \"ajv\". query string indicating component data validate schema .  Eventually may support full jsonpath syntax, now must name element within json.  See examples details. strict Set whether schema parsed strictly . strict mode schemas error \"prevent unexpected behaviours silently ignored mistakes user schema\". example error encounters unknown formats unknown keywords. See https://ajv.js.org/strict-mode.html details. available engine = \"ajv\".","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a json file — json_validate","text":"","code":"# A simple schema example: schema <- '{     \"$schema\": \"http://json-schema.org/draft-04/schema#\",     \"title\": \"Product\",     \"description\": \"A product from Acme\\'s catalog\",     \"type\": \"object\",     \"properties\": {         \"id\": {             \"description\": \"The unique identifier for a product\",             \"type\": \"integer\"         },         \"name\": {             \"description\": \"Name of the product\",             \"type\": \"string\"         },         \"price\": {             \"type\": \"number\",             \"minimum\": 0,             \"exclusiveMinimum\": true         },         \"tags\": {             \"type\": \"array\",             \"items\": {                 \"type\": \"string\"             },             \"minItems\": 1,             \"uniqueItems\": true         }     },     \"required\": [\"id\", \"name\", \"price\"] }'  # Test if some (invalid) json conforms to the schema jsonvalidate::json_validate(\"{}\", schema, verbose = TRUE) #> [1] FALSE #> attr(,\"errors\") #>        field     message #> 1    data.id is required #> 2  data.name is required #> 3 data.price is required  # Test if some (valid) json conforms to the schema json <- '{     \"id\": 1,     \"name\": \"A green door\",     \"price\": 12.50,     \"tags\": [\"home\", \"green\"] }' jsonvalidate::json_validate(json, schema) #> [1] TRUE  # Test a fraction of a data against a reference into the schema: jsonvalidate::json_validate(json, schema,                             query = \"tags\", reference = \"#/properties/tags\",                             engine = \"ajv\", verbose = TRUE) #> [1] TRUE"},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_validator.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a json validator — json_validator","title":"Create a json validator — json_validator","text":"Create validator can validate multiple json files.","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_validator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a json validator — json_validator","text":"","code":"json_validator(schema, engine = \"imjv\", reference = NULL, strict = FALSE)"},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_validator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a json validator — json_validator","text":"schema Contents json schema, filename containing schema. engine Specify validation engine use.  Options \"imjv\" (default; uses \"--json-valid\") \"ajv\" (Another JSON Schema Validator).  latter supports recent json schema features. reference Reference within schema use validating sub-schema instead full schema passed . example schema 'definitions' list including definition 'Hello' object, one pass \"#/definitions/Hello\" validator check json valid \"Hello\" object. available engine = \"ajv\". strict Set whether schema parsed strictly . strict mode schemas error \"prevent unexpected behaviours silently ignored mistakes user schema\". example error encounters unknown formats unknown keywords. See https://ajv.js.org/strict-mode.html details. available engine = \"ajv\".","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_validator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a json validator — json_validator","text":"function can used validate schema. Additionally, function two attributes assigned: v8 javascript context (used internally) engine, contains name engine used.","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_validator.html","id":"validation-engines","dir":"Reference","previous_headings":"","what":"Validation Engines","title":"Create a json validator — json_validator","text":"support two different json validation engines, imjv (\"--json-valid\") ajv (\"Another JSON Validator\"). imjv original validator included package remains default reasons backward compatibility. However, users encouraged migrate ajv support many features, including nested schemas span multiple files, meta schema versions later draft-04, validating using subschema, validating subset input data object. schema uses features print message screen indicating update running interactively. use warning disruptive users. can disable message setting option jsonvalidate.no_note_imjv TRUE. Consider using withr::with_options() (simply suppressMessages()) scope option want quieten within code control.  Alternatively, setting option jsonvalidate.no_note_imjv FALSE print message even noninteractively. Updating engine simply case adding engine = \"ajv\" json_validator json_validate calls, may see issues . json now fails validation: seen schemas spanned several files silently ignored. including , data may now fail validation need either fix data schema. code depended exact payload returned imjv: inspecting error result checking numbers errors, even columns used describe errors, likely need update code accommodate slightly different format ajv schema simply invalid: reference invalid metaschema example, jsonvalidate fail","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_validator.html","id":"using-multiple-files","dir":"Reference","previous_headings":"","what":"Using multiple files","title":"Create a json validator — json_validator","text":"Multiple files supported.  can schema references file child.json using {\"$ref\": \"child.json\"}---case child.json includes id $id element silently dropped filename used reference schema used schema id. support currently quite limited - (yet) read sub-child schemas relative child schema $id url, support reading URLs (local files supported).","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/reference/json_validator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a json validator — json_validator","text":"","code":"# A simple schema example: schema <- '{     \"$schema\": \"http://json-schema.org/draft-04/schema#\",     \"title\": \"Product\",     \"description\": \"A product from Acme\\'s catalog\",     \"type\": \"object\",     \"properties\": {         \"id\": {             \"description\": \"The unique identifier for a product\",             \"type\": \"integer\"         },         \"name\": {             \"description\": \"Name of the product\",             \"type\": \"string\"         },         \"price\": {             \"type\": \"number\",             \"minimum\": 0,             \"exclusiveMinimum\": true         },         \"tags\": {             \"type\": \"array\",             \"items\": {                 \"type\": \"string\"             },             \"minItems\": 1,             \"uniqueItems\": true         }     },     \"required\": [\"id\", \"name\", \"price\"] }'  # Create a validator function v <- jsonvalidate::json_validator(schema)  # Test if some (invalid) json conforms to the schema v(\"{}\", verbose = TRUE) #> [1] FALSE #> attr(,\"errors\") #>        field     message #> 1    data.id is required #> 2  data.name is required #> 3 data.price is required  # Test if some (valid) json conforms to the schema v('{     \"id\": 1,     \"name\": \"A green door\",     \"price\": 12.50,     \"tags\": [\"home\", \"green\"] }') #> [1] TRUE  # Using features from draft-06 or draft-07 requires the ajv engine: schema <- \"{   '$schema': 'http://json-schema.org/draft-06/schema#',   'type': 'object',   'properties': {     'a': {       'const': 'foo'     }   } }\"  # Create the validator v <- jsonvalidate::json_validator(schema, engine = \"ajv\")  # This confirms to the schema v('{\"a\": \"foo\"}') #> [1] TRUE  # But this does not v('{\"a\": \"bar\"}') #> [1] FALSE"},{"path":"https://docs.ropensci.org/jsonvalidate/news/index.html","id":"jsonvalidate-141","dir":"Changelog","previous_headings":"","what":"jsonvalidate 1.4.1","title":"jsonvalidate 1.4.1","text":"Add support subfolders nested schema references. (#61)","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/news/index.html","id":"jsonvalidate-140","dir":"Changelog","previous_headings":"","what":"jsonvalidate 1.4.0","title":"jsonvalidate 1.4.0","text":"Support safely serialising objects json, guided schema, new function json_serialise New object json_schema construction reusable validation serialisation functions","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/news/index.html","id":"jsonvalidate-132","dir":"Changelog","previous_headings":"","what":"jsonvalidate 1.3.2","title":"jsonvalidate 1.3.2","text":"CRAN release: 2021-11-03 Always uses ES5 version Ajv, allows use current “legacy” V8 (#51)","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/news/index.html","id":"jsonvalidate-130","dir":"Changelog","previous_headings":"","what":"jsonvalidate 1.3.0","title":"jsonvalidate 1.3.0","text":"Upgrade ajv version 8.5.0 Add arg strict json_validate json_validator allow evaluating schema strict mode ajv . (FALSE) default use permissive behaviour detailed JSON schema","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/news/index.html","id":"jsonvalidate-123","dir":"Changelog","previous_headings":"","what":"jsonvalidate 1.2.3","title":"jsonvalidate 1.2.3","text":"Schemas can use references files JSON pointers .e. schemas can reference parts files e.g. definitions.json#/definitions/hello JSON can validated subschema (#18, #19, @AliciaSchep) Validation error = TRUE now returns TRUE (NULL) success Schemas can span multiple files, included via \"$ref\": \"filename.json\" - supported ajv engine (#20, #21, @r-ash). Validation can performed fraction input data (#25)","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/news/index.html","id":"jsonvalidate-110","dir":"Changelog","previous_headings":"","what":"jsonvalidate 1.1.0","title":"jsonvalidate 1.1.0","text":"CRAN release: 2019-06-25 Add support JSON schema draft 06 07 using ajv node library. must used passing engine argument json_validate json_validator present (#2, #11, #15, #16, #17, @karawoo & @ijlyttle)","code":""},{"path":"https://docs.ropensci.org/jsonvalidate/news/index.html","id":"jsonvalidate-101","dir":"Changelog","previous_headings":"","what":"jsonvalidate 1.0.1","title":"jsonvalidate 1.0.1","text":"Initial CRAN release","code":""}]
